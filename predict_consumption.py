"""
Prediz o consumo de combust√≠vel usando o modelo treinado. üéâ‚õΩ

Este script carrega um modelo de regress√£o linear treinado, gera dados de entrada aleat√≥rios a cada 3 segundos e faz previs√µes de consumo de combust√≠vel. Os resultados s√£o apresentados em uma tabela usando a biblioteca `rich`.

**Funcionalidades Principais:**

* **Carregamento do Modelo:** Carrega o modelo treinado a partir do arquivo `model.joblib`.
* **Gera√ß√£o de Dados:** Gera dados aleat√≥rios de entrada (dist√¢ncia, velocidade, tipo de ve√≠culo).
* **Previs√£o:** Usa o modelo carregado para prever o consumo de combust√≠vel.
* **Interface Rich:** Apresenta os resultados em uma tabela formatada usando a biblioteca `rich`.
* **Tratamento de Erros:** Inclui tratamento de erros para lidar com arquivos n√£o encontrados e outras exce√ß√µes.
* **C√°lculo de Economia:** Calcula a economia em rela√ß√£o √† m√©dia do consumo normalizado.

**Dados de Entrada:**

* **distance:** Dist√¢ncia percorrida (km) üìè - N√∫mero aleat√≥rio entre 10 e 100.
* **speed:** Velocidade m√©dia (km/h) üí® - N√∫mero aleat√≥rio entre 40 e 120.
* **vehicle_type:** Tipo de ve√≠culo (carro üöó, moto üèçÔ∏è, caminh√£o üöö) - Escolhido aleatoriamente.

**Considera√ß√µes:**

* Os dados gerados s√£o aleat√≥rios e podem n√£o refletir cen√°rios reais.
* A precis√£o das previs√µes depende da qualidade do modelo treinado.

"""
import pandas as pd
import joblib
import numpy as np
import time
import random
from rich.console import Console
from rich.table import Table
from rich.progress import track
import colorama
import sys
from colorama import Fore, Style

colorama.init()

try:
    model = joblib.load('model.joblib')
    dataset = pd.read_csv('normalized_dataset.csv')
    avg_consumption = dataset['consumption'].mean()  # M√©dia do consumo normalizado
except FileNotFoundError:
    error_message = f"Erro: Arquivo 'model.joblib' ou 'normalized_dataset.csv' n√£o encontrado. ‚ùå"
    sys.stdout.buffer.write(error_message.encode('utf-8') + b'\n')
    exit()
except Exception as e:
    error_message = f"Erro ao carregar o modelo ou dataset: {e} ‚ùå"
    sys.stdout.buffer.write(error_message.encode('utf-8') + b'\n')
    exit()


iteration = 0
console = Console()
while True:
    try:
        iteration += 1
        # Gerar dados aleat√≥rios
        distance = random.uniform(10, 100)  # Dist√¢ncia entre 10 e 100 km
        speed = random.uniform(40, 120)  # Velocidade entre 40 e 120 km/h
        vehicle_type = random.choice(['carro', 'moto', 'caminh√£o'])

        # Criar um DataFrame com os dados de entrada, garantindo a presen√ßa de todas as colunas
        input_data = pd.DataFrame({
            'distance': [distance],
            'speed': [speed],
            'vehicle_type': [vehicle_type]
        })

        input_data = pd.get_dummies(input_data, columns=['vehicle_type'], drop_first=True)

        # Adicionar colunas faltantes com valor 0 se necess√°rio
        missing_cols = set(model.feature_names_in_) - set(input_data.columns)
        for c in missing_cols:
            input_data[c] = 0

        # Reordenar colunas para corresponder ao modelo
        input_data = input_data[model.feature_names_in_]

        # Prever o consumo
        consumption = model.predict(input_data)[0]
        economia = (consumption - avg_consumption) * 100 / avg_consumption  # Economia em %

        # Interface Rich com 4 grids
        table = Table(title=f"Previs√£o de Consumo - Itera√ß√£o {iteration}")
        table.add_column("M√©tricas", style="cyan", no_wrap=True)
        table.add_column("Valores", style="magenta")

        table.add_row("Tempo", time.strftime('%H:%M:%S'))
        table.add_row("Dist√¢ncia (km)", f"{distance:.2f} üìè")
        table.add_row("Velocidade (km/h)", f"{speed:.2f} üí®")
        table.add_row("Tipo de Ve√≠culo", f"{vehicle_type} üöóüèçÔ∏èüöö")
        table.add_row("Consumo Previsto (litros)", f"{consumption:.2f} ‚õΩ")

        if economia >= 0:
            economia_str = f"+{economia:.2f}%"  # Verde para economia positiva
        else:
            economia_str = f"{economia:.2f}%"  # Vermelho para economia negativa

        table.add_row("Economia", economia_str)

        console.print(table)

        time.sleep(3)  # Aguardar 3 segundos

    except KeyError as e:
        error_message = f"Tempo: {time.strftime('%H:%M:%S')}, Erro: Coluna '{e}' n√£o encontrada no modelo. ‚ùå"
        sys.stdout.buffer.write(error_message.encode('utf-8') + b'\n')
    except Exception as e:
        error_message = f"Tempo: {time.strftime('%H:%M:%S')}, Erro na predi√ß√£o: {e} ‚ùå"
        sys.stdout.buffer.write(error_message.encode('utf-8') + b'\n')
