"""
Pipeline completo de previs√£o de consumo de combust√≠vel com Rich, Colorama e emojis. üöóüí®‚õΩ

Este script executa todo o pipeline de previs√£o de consumo de combust√≠vel, desde a gera√ß√£o do dataset at√© a predi√ß√£o, utilizando a biblioteca `rich` para um log detalhado e visualmente atraente.

**Etapas do Pipeline:**

1. **Gera√ß√£o de Dataset:** Gera um dataset sint√©tico usando `generate_dataset.py`.
2. **Normaliza√ß√£o de Dados:** Normaliza os dados num√©ricos usando `normalize_data.py`.
3. **Treinamento do Modelo:** Treina um modelo de regress√£o linear usando `train_model.py`.
4. **Previs√£o:** Faz previs√µes de consumo usando `predict_consumption.py`.

**Funcionalidades:**

* **Log Detalhado:** Usa a biblioteca `rich` para exibir um log detalhado e formatado de cada etapa.
* **√çcones e Emojis:** Emprega √≠cones e emojis para melhorar a legibilidade e o apelo visual do log.
* **Tratamento de Erros:** Inclui tratamento de erros para lidar com poss√≠veis problemas em cada etapa.
* **Colorama:** Usa o Colorama para adicionar cores ao log.

"""
import subprocess
import time
from rich.console import Console
from rich.progress import track
import colorama
from colorama import Fore, Style

colorama.init()
console = Console()

def run_script(script_path, description):
    try:
        with console.status(f"[bold green]Executando {description}...[/]") as status:
            result = subprocess.run(['python', script_path], capture_output=True, text=True, check=True)
            console.print(f"[bold green]{description} conclu√≠do com sucesso! ‚úÖ[/]")
            return result.stdout
    except subprocess.CalledProcessError as e:
        console.print(f"[bold red]Erro ao executar {description}: {e}[/]")
        console.print(f"[bold red]Sa√≠da de erro: {e.stderr}[/]")
        return None
    except Exception as e:
        console.print(f"[bold red]Erro inesperado ao executar {description}: {e}[/]")
        return None

with console.status("[bold blue]Iniciando pipeline...[/]"):
    time.sleep(1)

stages = [
    ("Gera√ß√£o de Dataset", "generate_dataset.py"),
    ("Normaliza√ß√£o de Dados", "normalize_data.py"),
    ("Treinamento do Modelo", "train_model.py"),
    ("Previs√£o", "predict_consumption.py")
]

for description, script_path in track(stages, description="Executando pipeline..."):
    output = run_script(script_path, description)
    if output:
        console.print(output)

console.print("[bold green]Pipeline conclu√≠do com sucesso! üéâ[/]")
